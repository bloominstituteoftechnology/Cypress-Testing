{"ast":null,"code":"var _jsxFileName = \"/Users/ehsan/Desktop/projects/newreactpractice/src/Page.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport schema from './comp/schema';\nimport axios from \"axios\";\nimport * as yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Page = props => {\n  _s();\n\n  const generateData = props.generateData; // to keep track of your input\n\n  const [comment, setComment] = useState({\n    title: '',\n    body: \"\",\n    //////////\n    email: \"\",\n    password: '',\n    terms: false ///////\n\n  }); // to keep track of our errors\n\n  const [errors, setErrors] = useState({\n    title: '',\n    body: \"\",\n    //////////\n    email: \"\",\n    password: '',\n    terms: \"\" ///////\n\n  });\n  const [disabled, setDisabled] = useState(true); // we use use effect when ever there is an update to our state\n  // so we want your yup to fire when we add comments\n  // so wer first have to use our yup (schema) and then check it\n  // comment is our useState value that keep track of our inputs\n\n  useEffect(() => {\n    schema.isValid(comment).then(valid => {\n      /// it takes the objects inside of comment and compare it to what we have in yup itself\n      // console.log(valid)               /// its valid is true only when all the reqirment  that we set in yup are meet\n      setDisabled(!valid); /// now  look at the disabled on button and the setState disabled\n    });\n  }, [comment]); /// first setp up above now i want to set up errors that tells the user how to fill the form correctly\n  // in line validation using yup.reach   first make a function\n\n  const validation = (name, value) => {\n    // const {value,name} = e.target // look at the event which is our name and look at the names\n    yup.reach(schema, name).validate(value).then(valid => {\n      setErrors({ ...errors,\n        [name]: ''\n      }); // clearing error if user did the right thing\n    }).catch(err => {\n      // console.log(err)   /// this tell our   schema set errors\n      setErrors({ ...errors,\n        [name]: err.errors[0]\n      });\n    });\n  }; //////////////////////////// setting up axios //////////////////////////\n\n\n  const [post, setPost] = useState([]);\n  /*  1)   go to  submit function */\n\n  const [postError, setPostError] = useState(); ////////////////////////////////// End ////////////////////////////////\n\n  const changeinput = event => {\n    event.persist(); /// add this after seting up the error validation\n\n    const {\n      value,\n      name,\n      type,\n      checked\n    } = event.target;\n    const newValue = type === \"checkbox\" ? checked : value;\n    validation(name, newValue); // add this after persist is added\n\n    setComment({ ...comment,\n      [name]: newValue\n    });\n  }; // get some updates when we are doing axios\n\n\n  const submit = event => {\n    event.preventDefault();\n    axios.post('https://reqres.in/api/user', comment) /// 2 step for requesting data\n    .then(response => {\n      generateData(comment);\n      setComment({\n        title: '',\n        body: '',\n        email: \"\",\n        password: '',\n        terms: ''\n      }); // i move this and one under it so when post was sucessfull it get added to the page\n      // console.log(response.data) //// our data was posted\n\n      setPost(response.data); ///\n    }).catch(error => {\n      setPostError(\"the post was unsuccessful. please try again later we are working to solve the issue\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: 'title',\n      children: [\" Title\", /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-cy\": 'title',\n        id: 'title',\n        name: \"title\",\n        onChange: changeinput,\n        value: comment.title,\n        placeholder: 'write title'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), errors.title.length > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: errors.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 40\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"body\",\n      children: [\" Body\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n        \"data-cy\": \"body\",\n        name: 'body',\n        onChange: changeinput,\n        value: comment.body,\n        placeholder: 'In 20 words or more explain it to me'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), errors.body.length > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: errors.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 37\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: 'email',\n      children: [\" Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-cy\": \"email\",\n        id: 'email',\n        name: \"email\",\n        onChange: changeinput,\n        value: comment.email,\n        placeholder: 'Enter your email address',\n        type: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }, this), errors.email.length > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 42\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: 'password',\n      children: [\" Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-cy\": \"password\",\n        id: 'password',\n        name: \"password\",\n        onChange: changeinput,\n        value: comment.password,\n        type: \"password\",\n        placeholder: \"Enter your password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }, this), errors.password.length > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 45\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: 'terms',\n      children: [\" Terms and Conditions\", /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-cy\": \"terms\",\n        type: \"checkbox\",\n        name: \"terms\",\n        checked: comment.terms,\n        value: comment.terms,\n        onChange: changeinput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }, this), errors.terms.length > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: errors.terms\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 42\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      className: 'error',\n      children: JSON.stringify(postError, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: disabled,\n      children: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Page, \"cCfJeIbbgOCN5OBnfPnOCD59gtU=\");\n\n_c = Page;\nexport default Page;\n\nvar _c;\n\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"sources":["/Users/ehsan/Desktop/projects/newreactpractice/src/Page.js"],"names":["React","useState","useEffect","schema","axios","yup","Page","props","generateData","comment","setComment","title","body","email","password","terms","errors","setErrors","disabled","setDisabled","isValid","then","valid","validation","name","value","reach","validate","catch","err","post","setPost","postError","setPostError","changeinput","event","persist","type","checked","target","newValue","submit","preventDefault","response","data","error","length","JSON","stringify"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport schema from './comp/schema'\nimport axios from \"axios\";\n\nimport * as yup from \"yup\"\n\nconst Page =(props) => {\n\n\nconst  generateData = props.generateData\n\n    // to keep track of your input\n\n    const [comment,setComment] = useState({\n      title: '',\n        body:\"\",\n        //////////\n        email:\"\",\n        password:'',\n        terms:false,\n        ///////\n\n    })\n\n    // to keep track of our errors\n\n    const [errors,setErrors] = useState({\n        title: '',\n        body:\"\",\n        //////////\n        email:\"\",\n        password:'',\n        terms:\"\",\n        ///////\n\n    })\n\n    const [disabled,setDisabled] = useState(true)\n\n\n// we use use effect when ever there is an update to our state\n    // so we want your yup to fire when we add comments\n    // so wer first have to use our yup (schema) and then check it\n        // comment is our useState value that keep track of our inputs\n    useEffect(()=>{\n        schema.isValid(comment).then(valid => {  /// it takes the objects inside of comment and compare it to what we have in yup itself\n            // console.log(valid)               /// its valid is true only when all the reqirment  that we set in yup are meet\n\n            setDisabled(!valid)   /// now  look at the disabled on button and the setState disabled\n        })\n\n    },[comment])\n\n\n    /// first setp up above now i want to set up errors that tells the user how to fill the form correctly\n    // in line validation using yup.reach   first make a function\n\n    const  validation = (name,value) => {\n        // const {value,name} = e.target // look at the event which is our name and look at the names\n    yup.reach(schema,name).validate(value).then(valid =>  {\n       setErrors({...errors,[name]: ''}) // clearing error if user did the right thing\n    }).catch(err => {\n        // console.log(err)   /// this tell our   schema set errors\n        setErrors({\n            ...errors, [name]: err.errors[0]\n        })\n    });\n};\n\n//////////////////////////// setting up axios //////////////////////////\nconst [post , setPost] = useState([])\n\n  /*  1)   go to  submit function */\n\n    const [postError, setPostError] =useState()\n\n\n////////////////////////////////// End ////////////////////////////////\n\n    const changeinput = (event)=> {\n        event.persist()   /// add this after seting up the error validation\n        const {value,name, type,checked} = event.target\n        const newValue = type === \"checkbox\" ? checked : value\n        validation(name,newValue)   // add this after persist is added\n        setComment({...comment,[name]:newValue})\n    }\n\n\n    // get some updates when we are doing axios\n    const submit =(event) => {\n    event.preventDefault()\n\n        axios.post('https://reqres.in/api/user',comment)   /// 2 step for requesting data\n            .then(response => {\n                generateData(comment)\n                setComment({title: '', body:'',email:\"\",password:'',terms:''})                  // i move this and one under it so when post was sucessfull it get added to the page\n                // console.log(response.data) //// our data was posted\n                setPost(response.data)  ///\n            }).catch(error => {setPostError(\"the post was unsuccessful. please try again later we are working to solve the issue\")})\n    }\n\n\n    return (\n      <form onSubmit={submit}>\n        <label htmlFor={'title'}> Title\n          <input data-cy={'title'}\n                 id={'title'} name=\"title\" onChange={changeinput} value={comment.title} placeholder={'write title'} />\n            {errors.title.length > 0 ? <p className={\"error\"}>{errors.title}</p> :null}\n        </label>\n          <label htmlFor={\"body\"}> Body\n          <textarea data-cy={\"body\"}\n              name={'body'} onChange={changeinput} value={comment.body} placeholder={'In 20 words or more explain it to me'} />\n          {errors.body.length > 0 ? <p className={\"error\"}>{errors.body}</p> :null}\n          </label>\n\n          {/*/////////////////////////////////////////////////// email password and checkbox   //////////////////////////*/}\n\n          <label htmlFor={'email'}> Email\n              <input data-cy={\"email\"}\n                  id={'email'} name=\"email\" onChange={changeinput} value={comment.email} placeholder={'Enter your email address'} type=\"email\" />\n              {errors.email.length > 0 ? <p className={\"error\"}>{errors.email}</p> :null}\n          </label>\n\n          <label htmlFor={'password'}> Password\n              <input data-cy={\"password\"}\n                  id={'password'} name=\"password\" onChange={changeinput} value={comment.password}  type={\"password\"} placeholder={\"Enter your password\"}   />\n              {errors.password.length > 0 ? <p className={\"error\"}>{errors.password}</p> :null}\n          </label>\n\n          <label htmlFor={'terms'}> Terms and Conditions\n\n              <input\n                  data-cy={\"terms\"}\n                  type=\"checkbox\"\n                  name=\"terms\"\n                  checked={comment.terms}\n                  value={comment.terms}\n                  onChange={changeinput}\n              />\n              {errors.terms.length > 0 ? <p className={\"error\"}>{errors.terms}</p> :null}\n          </label>\n\n\n\n\n          {/*/////////////////////////////////////////////////// end  ///////////////////////////////////////////////////*/}\n\n            <pre className={'error'}>{JSON.stringify(postError,null,2)}</pre>\n          {/*// to show the error from error .catch i  axios*/}\n\n          <button disabled={disabled}>submit</button>\n\n\n      </form>\n    )\n\n\n}\nexport default  Page"]},"metadata":{},"sourceType":"module"}