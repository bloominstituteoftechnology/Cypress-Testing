{"ast":null,"code":"var _jsxFileName = \"/Users/ehsan/Desktop/projects/newreactpractice/src/Page.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport schema from './comp/schema';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Page = props => {\n  _s();\n\n  const generateData = props.generateData; // to keep track of your input\n\n  const [comment, setComment] = useState({\n    title: '',\n    body: \"\"\n  }); // to keep track of our errors\n\n  const [errors, setErrors] = useState({\n    title: '',\n    body: \"\"\n  });\n  const [disabled, setDisabled] = useState(true); // we use use effect when ever there is an update to our state\n  // so we want your yup to fire when we add comments\n  // so wer first have to use our yup (schema) and then check it\n  // comment is our useState value that keep track of our inputs\n\n  useEffect(() => {\n    schema.isValid(comment).then(valid => {\n      /// it takes the objects inside of comment and compare it to what we have in yup itself\n      console.log(valid); /// its valid is true only when all the reqirment  that we set in yup are meet\n\n      setDisabled(!valid); /// now  look at the disabled on button and the setState disabled\n    });\n  }, [comment]); /// first setp up above now i want to set up errors that tells the user how to fill the form correctly\n  // in line validation using yup.reach   first make a function\n\n  const changeinput = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setComment({ ...comment,\n      [name]: value\n    });\n  };\n\n  const submit = event => {\n    event.preventDefault();\n    generateData(comment);\n    setComment({\n      title: '',\n      body: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"title\",\n      onChange: changeinput,\n      value: comment.title,\n      placeholder: 'write title'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: 'body',\n      onChange: changeinput,\n      value: comment.body,\n      placeholder: 'in 20 words or more expalin it to me'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: disabled,\n      children: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Page, \"fNn4Ob691JFkVMISFPtpSMJwNJU=\");\n\n_c = Page;\nexport default Page;\n\nvar _c;\n\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"sources":["/Users/ehsan/Desktop/projects/newreactpractice/src/Page.js"],"names":["React","useState","useEffect","schema","axios","Page","props","generateData","comment","setComment","title","body","errors","setErrors","disabled","setDisabled","isValid","then","valid","console","log","changeinput","event","value","name","target","submit","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AACA,MAAMC,IAAI,GAAGC,KAAD,IAAW;AAAA;;AAGvB,QAAOC,YAAY,GAAGD,KAAK,CAACC,YAA5B,CAHuB,CAKnB;;AAEA,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBR,QAAQ,CAAC;AACpCS,IAAAA,KAAK,EAAE,EAD6B;AAElCC,IAAAA,IAAI,EAAC;AAF6B,GAAD,CAArC,CAPmB,CAanB;;AAEA,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBZ,QAAQ,CAAC;AAChCS,IAAAA,KAAK,EAAE,EADyB;AAEhCC,IAAAA,IAAI,EAAC;AAF2B,GAAD,CAAnC;AAMA,QAAM,CAACG,QAAD,EAAUC,WAAV,IAAyBd,QAAQ,CAAC,IAAD,CAAvC,CArBmB,CAwBvB;AACI;AACA;AACI;;AACJC,EAAAA,SAAS,CAAC,MAAI;AACVC,IAAAA,MAAM,CAACa,OAAP,CAAeR,OAAf,EAAwBS,IAAxB,CAA6BC,KAAK,IAAI;AAAG;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADkC,CACd;;AAEpBH,MAAAA,WAAW,CAAC,CAACG,KAAF,CAAX,CAHkC,CAGZ;AACzB,KAJD;AAMH,GAPQ,EAOP,CAACV,OAAD,CAPO,CAAT,CA5BmB,CAsCnB;AACA;;AAaA,QAAMa,WAAW,GAAIC,KAAD,IAAU;AAC1B,UAAM;AAACC,MAAAA,KAAD;AAAOC,MAAAA;AAAP,QAAeF,KAAK,CAACG,MAA3B;AACAhB,IAAAA,UAAU,CAAC,EAAC,GAAGD,OAAJ;AAAY,OAACgB,IAAD,GAAOD;AAAnB,KAAD,CAAV;AACH,GAHD;;AAKA,QAAMG,MAAM,GAAGJ,KAAD,IAAW;AACzBA,IAAAA,KAAK,CAACK,cAAN;AACIpB,IAAAA,YAAY,CAACC,OAAD,CAAZ;AACAC,IAAAA,UAAU,CAAC;AACPC,MAAAA,KAAK,EAAE,EADA;AAEPC,MAAAA,IAAI,EAAC;AAFE,KAAD,CAAV;AAKH,GARD;;AAWA,sBACE;AAAM,IAAA,QAAQ,EAAEe,MAAhB;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,QAAQ,EAAEL,WAA9B;AAA2C,MAAA,KAAK,EAAEb,OAAO,CAACE,KAA1D;AAAiE,MAAA,WAAW,EAAE;AAA9E;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAU,MAAA,IAAI,EAAE,MAAhB;AAAwB,MAAA,QAAQ,EAAEW,WAAlC;AAA+C,MAAA,KAAK,EAAEb,OAAO,CAACG,IAA9D;AAAoE,MAAA,WAAW,EAAE;AAAjF;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,QAAQ,EAAEG,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASH,CA7ED;;GAAMT,I;;KAAAA,I;AA8EN,eAAgBA,IAAhB","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport schema from './comp/schema'\nimport axios from \"axios\";\nconst Page =(props) => {\n\n\nconst  generateData = props.generateData\n\n    // to keep track of your input\n\n    const [comment,setComment] = useState({\n      title: '',\n        body:\"\"\n\n    })\n\n    // to keep track of our errors\n\n    const [errors,setErrors] = useState({\n        title: '',\n        body:\"\"\n\n    })\n\n    const [disabled,setDisabled] = useState(true)\n\n\n// we use use effect when ever there is an update to our state\n    // so we want your yup to fire when we add comments\n    // so wer first have to use our yup (schema) and then check it\n        // comment is our useState value that keep track of our inputs\n    useEffect(()=>{\n        schema.isValid(comment).then(valid => {  /// it takes the objects inside of comment and compare it to what we have in yup itself\n            console.log(valid)  /// its valid is true only when all the reqirment  that we set in yup are meet\n\n            setDisabled(!valid)   /// now  look at the disabled on button and the setState disabled\n        })\n\n    },[comment])\n\n\n    /// first setp up above now i want to set up errors that tells the user how to fill the form correctly\n    // in line validation using yup.reach   first make a function\n\n    \n\n\n\n\n\n\n\n\n\n\n    const changeinput = (event)=> {\n        const {value,name} = event.target\n        setComment({...comment,[name]:value})\n    }\n\n    const submit =(event) => {\n    event.preventDefault()\n        generateData(comment)\n        setComment({\n            title: '',\n            body:''\n\n        })\n    }\n\n\n    return (\n      <form onSubmit={submit}>\n          <input name=\"title\" onChange={changeinput} value={comment.title} placeholder={'write title'} />\n          <textarea name={'body'} onChange={changeinput} value={comment.body} placeholder={'in 20 words or more expalin it to me'} />\n          <button disabled={disabled}>submit</button>\n      </form>\n    )\n\n\n}\nexport default  Page"]},"metadata":{},"sourceType":"module"}