{"ast":null,"code":"var _jsxFileName = \"/Users/ehsan/Desktop/projects/newreactpractice/src/Page.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport schema from './comp/schema';\nimport axios from \"axios\";\nimport * as yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Page = props => {\n  _s();\n\n  const generateData = props.generateData; // to keep track of your input\n\n  const [comment, setComment] = useState({\n    title: '',\n    body: \"\"\n  }); // to keep track of our errors\n\n  const [errors, setErrors] = useState({\n    title: '',\n    body: \"\"\n  });\n  const [disabled, setDisabled] = useState(true); // we use use effect when ever there is an update to our state\n  // so we want your yup to fire when we add comments\n  // so wer first have to use our yup (schema) and then check it\n  // comment is our useState value that keep track of our inputs\n\n  useEffect(() => {\n    schema.isValid(comment).then(valid => {\n      /// it takes the objects inside of comment and compare it to what we have in yup itself\n      // console.log(valid)               /// its valid is true only when all the reqirment  that we set in yup are meet\n      setDisabled(!valid); /// now  look at the disabled on button and the setState disabled\n    });\n  }, [comment]); /// first setp up above now i want to set up errors that tells the user how to fill the form correctly\n  // in line validation using yup.reach   first make a function\n\n  const validation = e => {\n    const {\n      value,\n      name\n    } = e.target; // look at the event which is our name and look at the names\n\n    yup.reach(schema, name).validate(value).then(valid => {\n      setErrors({ ...errors,\n        [name]: ''\n      }); // clearing error if user did the right thing\n    }).catch(err => {\n      // console.log(err)   /// this tell our schema set errors\n      setErrors({ ...errors,\n        [name]: err.errors[0]\n      });\n    });\n  }; //////////////////////////// setting up axios //////////////////////////\n\n\n  const [post, setPost] = useState([]);\n  /*  1)   go to  submit function */\n\n  const [postError, setPostError] = useState(); ////////////////////////////////// End ////////////////////////////////\n\n  const changeinput = event => {\n    event.persist(); /// add this after seting up the error validation\n\n    const {\n      value,\n      name\n    } = event.target;\n    validation(event); // add this after persist is added\n\n    setComment({ ...comment,\n      [name]: value\n    });\n  }; // get some updates when we are doing axios\n\n\n  const submit = event => {\n    event.preventDefault();\n    axios.post('https://reqres.in/api/user', comment) /// 2 step for requesting data\n    .then(response => {\n      generateData(comment);\n      setComment({\n        title: '',\n        body: ''\n      }); // i move this and one under it so when post was sucessfull it get added to the page\n\n      console.log(response.data); //// our data was posted\n\n      setPost(response.data); ///\n    }).catch(error => {\n      setPostError(\"the post was unsuccessful. please try again later we are working to solve the issue\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: 'title',\n      children: [\" title\", /*#__PURE__*/_jsxDEV(\"input\", {\n        id: 'title',\n        name: \"title\",\n        onChange: changeinput,\n        value: comment.title,\n        placeholder: 'write title'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), errors.title.length > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: errors.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 40\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"body\",\n      children: [\" body\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: 'body',\n        onChange: changeinput,\n        value: comment.body,\n        placeholder: 'in 20 words or more explain it to me'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), errors.body.length > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: errors.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 37\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      className: 'error',\n      children: JSON.stringify(postError, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: disabled,\n      children: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Page, \"o3nTdmO3RD2AIPTdTtRSrYF/roE=\");\n\n_c = Page;\nexport default Page;\n\nvar _c;\n\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"sources":["/Users/ehsan/Desktop/projects/newreactpractice/src/Page.js"],"names":["React","useState","useEffect","schema","axios","yup","Page","props","generateData","comment","setComment","title","body","errors","setErrors","disabled","setDisabled","isValid","then","valid","validation","e","value","name","target","reach","validate","catch","err","post","setPost","postError","setPostError","changeinput","event","persist","submit","preventDefault","response","console","log","data","error","length","JSON","stringify"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport schema from './comp/schema'\nimport axios from \"axios\";\n\nimport * as yup from \"yup\"\n\nconst Page =(props) => {\n\n\nconst  generateData = props.generateData\n\n    // to keep track of your input\n\n    const [comment,setComment] = useState({\n      title: '',\n        body:\"\"\n\n    })\n\n    // to keep track of our errors\n\n    const [errors,setErrors] = useState({\n        title: '',\n        body:\"\"\n\n    })\n\n    const [disabled,setDisabled] = useState(true)\n\n\n// we use use effect when ever there is an update to our state\n    // so we want your yup to fire when we add comments\n    // so wer first have to use our yup (schema) and then check it\n        // comment is our useState value that keep track of our inputs\n    useEffect(()=>{\n        schema.isValid(comment).then(valid => {  /// it takes the objects inside of comment and compare it to what we have in yup itself\n            // console.log(valid)               /// its valid is true only when all the reqirment  that we set in yup are meet\n\n            setDisabled(!valid)   /// now  look at the disabled on button and the setState disabled\n        })\n\n    },[comment])\n\n\n    /// first setp up above now i want to set up errors that tells the user how to fill the form correctly\n    // in line validation using yup.reach   first make a function\n\n    const  validation = (e) => {\n        const {value,name} = e.target // look at the event which is our name and look at the names\n    yup.reach(schema,name).validate(value).then(valid =>  {\n       setErrors({...errors,[name]: ''}) // clearing error if user did the right thing\n    }).catch(err => {\n        // console.log(err)   /// this tell our schema set errors\n        setErrors({\n            ...errors, [name]: err.errors[0]\n        })\n    });\n};\n\n//////////////////////////// setting up axios //////////////////////////\nconst [post , setPost] = useState([])\n\n  /*  1)   go to  submit function */\n\n    const [postError, setPostError] =useState()\n\n\n////////////////////////////////// End ////////////////////////////////\n\n    const changeinput = (event)=> {\n        event.persist()   /// add this after seting up the error validation\n        const {value,name} = event.target\n        validation(event)   // add this after persist is added\n        setComment({...comment,[name]:value})\n    }\n\n\n    // get some updates when we are doing axios\n    const submit =(event) => {\n    event.preventDefault()\n\n        axios.post('https://reqres.in/api/user',comment)   /// 2 step for requesting data\n            .then(response => {\n                generateData(comment)\n                setComment({title: '', body:''})                  // i move this and one under it so when post was sucessfull it get added to the page\n                console.log(response.data) //// our data was posted\n                setPost(response.data)  ///\n            }).catch(error => {setPostError(\"the post was unsuccessful. please try again later we are working to solve the issue\")})\n    }\n\n\n    return (\n      <form onSubmit={submit}>\n        <label htmlFor={'title'}> title\n          <input id={'title'} name=\"title\" onChange={changeinput} value={comment.title} placeholder={'write title'} />\n            {errors.title.length > 0 ? <p className={\"error\"}>{errors.title}</p> :null}\n        </label>\n          <label htmlFor={\"body\"}> body\n          <textarea name={'body'} onChange={changeinput} value={comment.body} placeholder={'in 20 words or more explain it to me'} />\n          {errors.body.length > 0 ? <p className={\"error\"}>{errors.body}</p> :null}\n          </label>\n\n          {/*/////////////////////////////////////////////////// email password and checkbox   //////////////////////////*/}\n\n\n\n          {/*/////////////////////////////////////////////////// end  ///////////////////////////////////////////////////*/}\n\n            <pre className={'error'}>{JSON.stringify(postError,null,2)}</pre>\n          {/*// to show the error from error .catch i  axios*/}\n\n          <button disabled={disabled}>submit</button>\n\n\n      </form>\n    )\n\n\n}\nexport default  Page"]},"metadata":{},"sourceType":"module"}